'use client';

import { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Mic, MicOff, MessageSquare, Loader } from 'lucide-react';
import { RealtimeAgent, RealtimeSession } from '@openai/agents/realtime';
import { SakeData } from '@/data/sakeData';

interface VoiceChatProps {
  isRecording: boolean;
  setIsRecording: (recording: boolean) => void;
  onSakeRecommended: (sake: SakeData) => void;
}

export default function VoiceChat({ isRecording, setIsRecording, onSakeRecommended }: VoiceChatProps) {
  const [session, setSession] = useState<RealtimeSession | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [transcript, setTranscript] = useState<string[]>([]);
  const [error, setError] = useState<string | null>(null);
  const agentRef = useRef<RealtimeAgent | null>(null);

  // Initialize agent and create session
  useEffect(() => {
    const initializeAgent = async () => {
      if (agentRef.current) return;

      const agent = new RealtimeAgent({
        name: 'Êó•Êú¨ÈÖí„ÇΩ„É†„É™„Ç®',
        instructions: `„ÅÇ„Å™„Åü„ÅØÊó•Êú¨ÈÖí„ÅÆÂ∞ÇÈñÄÁü•Ë≠ò„ÇíÊåÅ„Å§Ë¶™„Åó„Åø„ÇÑ„Åô„ÅÑAI„ÇΩ„É†„É™„Ç®„Åß„Åô„ÄÇ
        
        ## „ÅÇ„Å™„Åü„ÅÆÂΩπÂâ≤
        - Êó•Êú¨ÈÖí„ÇíÊÑõ„Åô„ÇãÊÉÖÁÜ±ÁöÑ„Å™„ÇΩ„É†„É™„Ç®„Å®„Åó„Å¶„ÄÅ„ÅäÂÆ¢Êßò„ÅÆÂ•Ω„Åø„ÇÑË¶ÅÊúõ„ÇíËÅû„ÅçÂèñ„Çã
        - ÂØæË©±„ÇíÈÄö„Åò„Å¶„ÅäÂÆ¢Êßò„ÅÆÂ•Ω„Åø„ÇíÁêÜËß£„Åó„ÄÅÊúÄÈÅ©„Å™Êó•Êú¨ÈÖí„ÇíÊé®Ëñ¶„Åô„Çã
        - Êó•Êú¨ÈÖí„ÅÆÁü•Ë≠ò„ÇíÂàÜ„Åã„Çä„ÇÑ„Åô„Åè„ÄÅÊ•Ω„Åó„Åè‰ºù„Åà„Çã
        
        ## ÂØæË©±„ÅÆÊµÅ„Çå
        1. „Åæ„ÅöÊå®Êã∂„Çí„Åó„Å¶„ÄÅ„ÅäÂÆ¢Êßò„Åå„Å©„ÅÆ„Çà„ÅÜ„Å™Êó•Êú¨ÈÖí„Çí„ÅäÊé¢„Åó„Åã„ÇíÂ∞ã„Å≠„Çã
        2. ‰ª•‰∏ã„ÅÆÈ†ÖÁõÆ„Å´„Å§„ÅÑ„Å¶Ë≥™Âïè„Åó„Å¶Â•Ω„Åø„ÇíÊääÊè°„Åô„ÇãÔºö
           - Âë≥„ÅÆÂ•Ω„ÅøÔºàËæõÂè£„ÉªÁîòÂè£„Éª„Éê„É©„É≥„ÇπÂûãÔºâ
           - „Éú„Éá„Ç£„ÅÆÂ•Ω„ÅøÔºàËªΩÂø´„Éª‰∏≠Á®ãÂ∫¶„ÉªÊøÉÂéöÔºâ
           - ‰æ°Ê†ºÂ∏ØÔºà„ÅäÊâãÈ†É„Éª‰∏≠‰æ°Ê†ºÂ∏Ø„ÉªÈ´òÁ¥öÔºâ
           - ‰∏ÄÁ∑í„Å´Ê•Ω„Åó„ÇÄÊñôÁêÜ
           - È£≤„ÇÄÂ†¥Èù¢„Éª„Ç∑„Éº„É≥
        3. ÊÉÖÂ†±„ÅåÂçÅÂàÜÈõÜ„Åæ„Å£„Åü„Çâ„ÄÅÊó•Êú¨ÈÖí„ÇíÊé®Ëñ¶„Åô„Çã
        
        ## Ë©±„ÅóÊñπ
        - Ë¶™„Åó„Åø„ÇÑ„Åô„Åè„ÄÅÂ∞ÇÈñÄÁü•Ë≠ò„ÇíÊåÅ„Å°„Å™„Åå„Çâ„ÇÇÂ†ÖËã¶„Åó„Åè„Å™„ÅÑ
        - Êó•Êú¨ÈÖí„ÅÆÈ≠ÖÂäõ„Çí‰ºù„Åà„ÇãÊÉÖÁÜ±„ÇíÊåÅ„Å£„Å¶Ë©±„Åô
        - Áõ∏Êâã„ÅÆË©±„Çí„Çà„ÅèËÅû„Åç„ÄÅË≥™Âïè„ÇíÈÄö„Åò„Å¶ÁêÜËß£„ÇíÊ∑±„ÇÅ„Çã
        - Êó•Êú¨ÈÖí„ÅÆÂ∞ÇÈñÄÁî®Ë™û„ÅØÂàÜ„Åã„Çä„ÇÑ„Åô„ÅèË™¨Êòé„Åô„Çã
        
        ## ÈáçË¶Å„Å™„É´„Éº„É´
        - ÂçÅÂàÜ„Å™ÊÉÖÂ†±„ÇíËÅû„ÅçÂèñ„Å£„ÅüÂæå„Å´„ÄÅÂÖ∑‰ΩìÁöÑ„Å™Êó•Êú¨ÈÖí„ÅÆÊé®Ëñ¶„ÇíË°å„ÅÜ
        - Êé®Ëñ¶„Åô„ÇãÈöõ„ÅØ„ÄÅ„Å™„Åú„Åù„ÅÆÊó•Êú¨ÈÖí„Åå„Åä„Åô„Åô„ÇÅ„Å™„ÅÆ„Åã„ÇíË™¨Êòé„Åô„Çã
        - 1„Å§„ÅÆÊó•Êú¨ÈÖí„Å´Áµû„Å£„Å¶Ë©≥„Åó„ÅèÁ¥π‰ªã„Åô„Çã`
      });

      agentRef.current = agent;
      
      const newSession = new RealtimeSession(agent);
      setSession(newSession);

      // Listen to raw transport events for finalized user input transcription
      newSession.on('transport_event', (event: any) => {
        if (event?.type === 'conversation.item.input_audio_transcription.completed' && event.transcript) {
          setTranscript(prev => [...prev, `You: ${event.transcript}`]);
        }
      });

      // Track history additions to capture assistant text outputs
      newSession.on('history_added', (item: any) => {
        if (item?.type === 'message' && item.role === 'assistant') {
          const texts = (item.content || [])
            .filter((c: any) => c?.type === 'output_text' && typeof c.text === 'string')
            .map((c: any) => c.text)
            .join('');
          if (texts) {
            setTranscript(prev => [...prev, `AI: ${texts}`]);

            const textLower = texts.toLowerCase();
            if (textLower.includes('Áç∫Á•≠') || textLower.includes('„Å†„Å£„Åï„ÅÑ')) {
              const mockSake = {
                id: "sake-001",
                name: "Áç∫Á•≠ Á¥îÁ±≥Â§ßÂêüÈÜ∏Á£®„Åç‰∏âÂâ≤‰πùÂàÜ",
                brewery: "Êó≠ÈÖíÈÄ†",
                region: "Â±±Âè£Áúå",
                type: "Á¥îÁ±≥Â§ßÂêüÈÜ∏",
                alcohol: 16.0,
                sakeValue: 6,
                acidity: 1.1,
                flavor_profile: {
                  sweetness: 3,
                  lightness: 4,
                  complexity: 4,
                  fruitiness: 4
                },
                tasting_notes: ["ËèØ„ÇÑ„Åã„Å™ÂêüÈÜ∏È¶ô", "‰∏äÂìÅ„Å™Áîò„Åø", "„ÇØ„É™„Ç¢„Å™ÂæåÂë≥", "Ê¥ãÊ¢®„ÅÆ„Çà„ÅÜ„Å™È¶ô„Çä"],
                food_pairing: ["Âà∫Ë∫´", "ÂØøÂè∏", "ÁôΩË∫´È≠ö„ÅÆÊñôÁêÜ", "ËªΩ„ÅÑÂâçËèú"],
                serving_temp: ["ÂÜ∑ÈÖí", "Â∏∏Ê∏©"],
                price_range: "¬•3,000-5,000",
                description: "Â±±Áî∞Èå¶„Çí39%„Åæ„ÅßÁ£®„ÅÑ„ÅüË¥ÖÊ≤¢„Å™Á¥îÁ±≥Â§ßÂêüÈÜ∏„ÄÇ„Éï„É´„Éº„ÉÜ„Ç£„Éº„ÅßËèØ„ÇÑ„Åã„Å™È¶ô„Çä„Å®„ÄÅÈÄèÊòéÊÑü„ÅÆ„ÅÇ„ÇãÂë≥„Çè„ÅÑ„ÅåÁâπÂæ¥ÁöÑ„Å™ÈÄ∏ÂìÅ„ÄÇ",
                image_url: "/images/sake-dassai.jpg"
              };
              setTimeout(() => onSakeRecommended(mockSake), 1000);
            }
          }
        }
      });

      newSession.on('error', (event: any) => {
        console.error('Session error:', event);
        setError('Connection error occurred');
        setIsConnected(false);
        setIsLoading(false);
      });
    };

    initializeAgent();
  }, [onSakeRecommended]);

  const connectToSession = async () => {
    if (!session) return;
    
    setIsLoading(true);
    setError(null);

    try {
      // Get client secret from our API
      const response = await fetch('/api/client-secret', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      const data = await response.json().catch(() => null);
      if (!response.ok || !data?.value) {
        const details = (data && (data.error || data.details)) || 'Failed to get client secret';
        throw new Error(typeof details === 'string' ? details : JSON.stringify(details));
      }
      
      await session.connect({
        apiKey: data.value
      });
      // Ensure we are unmuted when starting
      session.mute(false);

      setIsConnected(true);
      setIsLoading(false);
      setIsRecording(true);
    } catch (error: any) {
      console.error('Failed to connect:', error);
      setError(error?.message || 'Failed to connect to AI assistant');
      setIsLoading(false);
    }
  };

  const disconnectFromSession = () => {
    if (session) {
      session.close();
      setIsConnected(false);
      setIsRecording(false);
    }
  };

  const toggleRecording = () => {
    if (!isConnected) {
      connectToSession();
      return;
    }
    if (!session) return;

    if (isRecording) {
      session.mute(true);
      setIsRecording(false);
    } else {
      session.mute(false);
      setIsRecording(true);
    }
  };

  // Clean up on unmount
  useEffect(() => {
    return () => {
      try {
        session?.close();
      } catch {}
    };
  }, [session]);

  return (
    <div className="flex flex-col items-center space-y-6">
      {/* Microphone Button */}
      <div className="relative">
        {/* Pulse rings for active recording */}
        <AnimatePresence>
          {isRecording && (
            <>
              <motion.div
                className="absolute inset-0 rounded-full border-2 border-amber-400"
                initial={{ scale: 1, opacity: 1 }}
                animate={{ scale: 2, opacity: 0 }}
                exit={{ scale: 1, opacity: 1 }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  ease: 'easeOut'
                }}
              />
              <motion.div
                className="absolute inset-0 rounded-full border-2 border-orange-400"
                initial={{ scale: 1, opacity: 1 }}
                animate={{ scale: 2.5, opacity: 0 }}
                exit={{ scale: 1, opacity: 1 }}
                transition={{
                  duration: 2,
                  repeat: Infinity,
                  ease: 'easeOut',
                  delay: 0.5
                }}
              />
            </>
          )}
        </AnimatePresence>

        <motion.button
          onClick={toggleRecording}
          className={`
            relative w-20 h-20 rounded-full flex items-center justify-center transition-all duration-300
            ${isRecording 
              ? 'bg-red-500 hover:bg-red-600 shadow-lg shadow-red-500/50' 
              : isConnected 
                ? 'bg-orange-500 hover:bg-orange-600 shadow-lg shadow-orange-500/50'
                : 'bg-gray-700 hover:bg-gray-600 shadow-lg'
            }
          `}
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.95 }}
          disabled={isLoading}
        >
          {isLoading ? (
            <Loader className="w-8 h-8 text-white animate-spin" />
          ) : isRecording ? (
            <MicOff className="w-8 h-8 text-white" />
          ) : (
            <Mic className="w-8 h-8 text-white" />
          )}
        </motion.button>
      </div>

      {/* Status Text */}
      <motion.div
        className="text-center space-y-2"
        initial={{ opacity: 0, y: 10 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
      >
        <p className="text-lg font-medium text-white">
          {isLoading 
            ? 'AI„ÇΩ„É†„É™„Ç®„Å´Êé•Á∂ö‰∏≠...'
            : isRecording 
              ? '„ÅäË©±„Åó„Åè„Å†„Åï„ÅÑ üé§'
              : isConnected
                ? 'AI„ÇΩ„É†„É™„Ç®„Å®Êé•Á∂öÊ∏à„Åø'
                : '„Éû„Ç§„ÇØ„Éú„Çø„É≥„ÇíÊäº„Åó„Å¶„Çπ„Çø„Éº„Éà'
          }
        </p>
        
        {error && (
          <motion.p 
            className="text-red-400 text-sm"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
          >
            „Ç®„É©„Éº: {error}
          </motion.p>
        )}
      </motion.div>

      {/* Conversation History */}
      {transcript.length > 0 && (
        <motion.div
          className="w-full max-w-2xl space-y-2 max-h-60 overflow-y-auto"
          initial={{ opacity: 0, height: 0 }}
          animate={{ opacity: 1, height: 'auto' }}
          transition={{ duration: 0.5 }}
        >
          {transcript.map((message, index) => (
            <motion.div
              key={index}
              className={`p-3 rounded-lg glass ${
                message.startsWith('You:') 
                  ? 'ml-8 bg-gray-700/30' 
                  : 'mr-8 bg-orange-500/20'
              }`}
              initial={{ opacity: 0, x: message.startsWith('You:') ? 20 : -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.1 }}
            >
              <p className="text-sm text-gray-200">{message}</p>
            </motion.div>
          ))}
        </motion.div>
      )}

      {/* Connection Status Indicator */}
      <div className="flex items-center gap-2 text-sm text-gray-400">
        <div 
          className={`w-2 h-2 rounded-full ${
            isConnected ? 'bg-green-400' : 'bg-red-400'
          }`}
        />
        {isConnected ? 'Êé•Á∂ö‰∏≠' : 'Êú™Êé•Á∂ö'}
      </div>
    </div>
  );
}
